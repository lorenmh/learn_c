#include "iostream"
#include "fstream"
#include "GLES3/gl3.h"
#include "SDL2/SDL.h"

#include "point.h"
#include "vec2.h"
#include "line.h"

// forward declarations
GLuint BuildShaderProgram(const char *vsPath, const char *fsPath);
GLuint CreateShader(GLenum eShaderType, const char *strShaderFile);

int main( int argc, char* argv[] )
{

  if ( SDL_Init( SDL_INIT_VIDEO ) < 0 ) return 1;

  SDL_Window *window = SDL_CreateWindow(
    "Asteroids",
    SDL_WINDOWPOS_UNDEFINED,
    SDL_WINDOWPOS_UNDEFINED,
    640,
    480,
    SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL
  );

  SDL_GLContext glContext = SDL_GL_CreateContext( window );

  if ( glContext == NULL )
  {
    printf( "Error with OpenGL context\n" );
    return 1;
  }

  SDL_GL_MakeCurrent( window, glContext );

  SDL_GL_SetAttribute( SDL_GL_CONTEXT_MAJOR_VERSION, 3 );
  SDL_GL_SetAttribute( SDL_GL_CONTEXT_MINOR_VERSION, 3 );

  //glewExperimental = GL_TRUE;
  //GLenum glewStatus = glewInit();

  //if ( glewStatus != 0 )
  //{
  //  fprintf( stderr, "Error: %s\n", glewGetErrorString( glewStatus ) );
  //  return 1;
  //}

  glClearColor( 0.2, 0.1, 0.3, 0.0 );

  glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );

  GLuint programId = BuildShaderProgram( "vs.glsl", "fs.glsl" );
  glUseProgram( programId );

  GLuint VertexArrayID;
  glGenVertexArrays( 1, &VertexArrayID );
  glBindVertexArray( VertexArrayID );

  static const GLfloat g_vertex_buffer_data[] = {
    -1.0f, -1.0f, 0.0f,
    1.0, -1.0f, 0.0f,
    0.0, 1.0f, 0.0f
  };

  GLuint vertexBuffer;

  glGenBuffers( 1, &vertexBuffer );
  glBindBuffer( GL_ARRAY_BUFFER, vertexBuffer );
  glBufferData(
      GL_ARRAY_BUFFER,
      sizeof( g_vertex_buffer_data ),
      g_vertex_buffer_data,
      GL_STATIC_DRAW
  );

  glEnableVertexAttribArray( 0 );
  glBindBuffer( GL_ARRAY_BUFFER, vertexBuffer );
  glVertexAttribPointer(
      0,
      3,
      GL_FLOAT,
      GL_FALSE,
      0,
      (void *) 0
  );

  glDrawArrays( GL_TRIANGLES, 0, 3 );

  glDisableVertexAttribArray( 0 );

  SDL_GL_SwapWindow( window );
  SDL_Delay( 2000 );
}

GLuint BuildShaderProgram(const char *vsPath, const char *fsPath)
{
	GLuint vertexShader;
	GLuint fragmentShader;
	
	vertexShader = CreateShader(GL_VERTEX_SHADER, vsPath);
	fragmentShader = CreateShader(GL_FRAGMENT_SHADER, fsPath);
	
	/* So we've compiled our shaders, now we need to link them in to the program
	that will be used for rendering. */
	
	/*This section could be broken out into a separate function, but we're doing it here 
	because I'm not using C++ STL features that would make this easier. Tutorial doing so is 
	here: http://www.arcsynthesis.org/gltut/Basics/Tut01%20Making%20Shaders.html */
	
	GLuint tempProgram;
	tempProgram = glCreateProgram();
	
	glAttachShader(tempProgram, vertexShader);
	glAttachShader(tempProgram, fragmentShader);
	
	glLinkProgram(tempProgram); //linking!
	
	//error checking
	GLint status;
    	glGetProgramiv(tempProgram, GL_LINK_STATUS, &status);
    	if (status == GL_FALSE)
    	{
    		GLint infoLogLength;
        	glGetProgramiv(tempProgram, GL_INFO_LOG_LENGTH, &infoLogLength);
	
		GLchar strInfoLog[4096];
		glGetProgramInfoLog(tempProgram, infoLogLength, NULL, strInfoLog);
		printf("Shader linker failure: %s\n", strInfoLog);
		return -1;
	}
	else
		puts("Shader linked sucessfully!");
	
	glDetachShader(tempProgram, vertexShader);
	glDetachShader(tempProgram, fragmentShader);
	
	return tempProgram;
}

GLuint CreateShader(GLenum eShaderType, const char *strShaderFile)
{
	char shaderSource[4096];
	char inChar;
	FILE *shaderFile;
	int i = 0;
	
	shaderFile = fopen(strShaderFile, "r");
	while(fscanf(shaderFile,"%c",&inChar) > 0)
	{
		shaderSource[i++] = inChar; //loading the file's chars into array
	}
	shaderSource[i - 1] = '\0';
	fclose(shaderFile);
	puts(shaderSource); //print to make sure the string is loaded
	
	GLuint shader = glCreateShader(eShaderType);
	const char *ss = shaderSource;
	glShaderSource(shader, 1, &ss, NULL);
	
	glCompileShader(shader);
	
	GLint status;
	glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
	if (status == GL_FALSE)
	{
		GLint infoLogLength;
        	glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLogLength);
        
        	GLchar strInfoLog[4096];
        	glGetShaderInfoLog(shader, infoLogLength, NULL, strInfoLog);
        
		char strShaderType[16];
		switch(eShaderType)
		{
			case GL_VERTEX_SHADER: sprintf(strShaderType, "vertex"); break;
			case GL_FRAGMENT_SHADER: sprintf(strShaderType, "fragment"); break;
		}

		printf("Compile failure in %s shader:\n%s\n", strShaderType, strInfoLog);
		return -1;
	}
	else
		puts("Shader compiled sucessfully!");

	return shader;
}
